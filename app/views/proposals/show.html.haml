.event-info-bar
  .row
    .col-md-8
      .event-info.event-info-dense
        %strong.event-title= event.name
        - if event.start_date? && event.end_date?
          %span.event-meta
            %i.fa.fa-fw.fa-calendar
            = event.date_range
    .col-md-4.text-right.text-right-responsive
      .event-info.event-info-dense
        %span{:class => "event-meta event-status-badge event-status-#{event.status}"}
          CFP 
          = event.status
        - if event.open?
          %span.event-meta
            CFP closes:
            %strong= event.closes_at(:month_day_year)
            
#proposal
  .page-header.page-header-slim
    .row
      .col-md-8
        %h1
          = proposal.title
          = proposal.public_state(small: true)
      .col-md-4
        - if proposal.has_speaker?(current_user)
          .toolbox.pull-right
            .clearfix
              - unless proposal.withdrawn? || proposal.accepted? || proposal.confirmed?
                = link_to edit_event_proposal_path(event_slug: event.slug, uuid: proposal), class: 'btn btn-primary' do
                  %span.glyphicon.glyphicon-edit
                  Edit
                -if proposal.has_reviewer_activity?
                  = proposal.withdraw_button
                -else
                  = link_to event_proposal_path, method: :delete, data: {confirm: 'This will delete your talk. Are you sure you want to do this? It can not be undone.'}, class: 'btn btn-warning', id: 'delete' do
                    %span.glyphicon.glyphicon-exclamation-sign
                    Delete Proposal

  .row
    .col-md-8
      = render partial: 'proposals/contents', locals: { proposal: proposal }

      .proposal-section
        %h3 Speaker Information
        = render proposal.speakers
        - if (proposal.has_speaker?(current_user))
          %h4.control-label Invited Speakers
          - invitations.each do |invitation|
            .clearfix
              %ul.invitation
                %li
                  = invitation.state_label
                  = invitation.email
                  .pull-right
                    = link_to 'Resend',
                      resend_invitation_path(invitation_slug: invitation.slug),
                      method: :post,
                      class: 'btn btn-xs btn-primary',
                      disabled: !invitation.pending?
                    = link_to 'Remove',
                      invitation_path(invitation_slug: invitation.slug),
                      method: :delete,
                      class: 'btn btn-xs btn-danger',
                      disabled: !invitation.pending?,
                      data: {confirm: 'Are you sure you want to remove this invitation?'}
          .new-speaker-invite
            %p
              You may invite other speakers to your proposal.
              %button.button.btn.btn-success.btn-xs.speaker-invite-button 
                Invite a Speaker
            .speaker-invite-form
              = form_tag invitations_path(proposal_uuid: proposal.uuid), class: 'speaker' do
                .widget.widget-card
                  %h3.control-label Invite a Speaker
                  .input-group{role: "group", "aria-label" => "Enter an Email to Invite a Speaker"}
                    = email_field_tag :email, '', placeholder: "Enter an email address.", class: 'form-control'
                    %span.input-group-btn
                      %button.btn.btn-success(type="submit")
                        %span.glyphicon.glyphicon-envelope
                        Invite

    .col-md-4
      .widget.widget-card
        .widget-header
          %i.fa.fa-comments
          %h3= pluralize(proposal.public_comments.count, 'comment')
        .widget-content
          = render partial: 'proposals/comments',
            locals: { proposal: proposal, comments: proposal.public_comments }
